<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg">
<head>
  <meta charset="UTF-8" />
  <title>The custom showcase widget plugin</title>
  <link type="text/css" rel="stylesheet" media="all" href="style.css" />
  <link type="text/css" rel="stylesheet" media="all" href="core.css" />
</head>
<body>
  <div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">The custom showcase widget plugin</h1>
                </header>
            
            <article>
                
<p>In this section we'll create a custom widget for our theme. We have the showcase area on our web page and we will create a widget that can take in a title and some text, and will spit it out right in the widget position.</p>
<p>If we look at the documentation page at <a href="https://codex.wordpress.org/Widgets_API"><span class="URLPACKT">https://codex.wordpress.org/Widgets_API</span></a> for the Widgets API, what we need to do basically is create a class that extends <kbd>WP_Widget</kbd>, and it's going to have a few different methods. It'll have a constructor to call the constructor of the parent class and also set up the title and description, the <kbd>widget</kbd> method that will output the content of the widget, the <kbd>form</kbd> method that will output the admin form, and <kbd>update</kbd> that will take care of updating any fields.</p>
<p>We'll go into the <kbd>wp-content</kbd> | <kbd>plugins</kbd> folder and create a new folder there, <kbd>showcase-widget</kbd> (although it is a plugin, it's also a widget). Let's go ahead and create a new file in this folder, <kbd>showcase-widget.php</kbd>, and then one more file, which is going to be the class file, <kbd>class.showcase-widget.php</kbd>. The <kbd>showcase-widget.php</kbd> file is going to be the main file but the class file is going to be where we'll do most of the functionality.</p>
<p>We'll now add some code to the <kbd>showcase-widget.php</kbd> file:</p>
<pre>&lt;?php<br/>   /*<br/>    * Plugin Name: Showcase Widget<br/>    * Description: Simple showcase area<br/>    * Version: 1.0<br/>    * Author: Brad Traversy<br/>    */<br/> <br/>    // Include class<br/>    include('class.showcase-widget.php');<br/> <br/>    // Register Widget<br/>    function register_showcase_widget(){<br/>        register_widget('Showcase_Widget');<br/>    }<br/> <br/>    add_action('widgets_init', 'register_showcase_widget');</pre>
<div class="packt_infobox"><kbd>Showcase_Widget</kbd> in the <kbd>register_widget('Showcase_Widget');</kbd> is our class name. This, in general, needs to be your class name, whatever you choose.</div>
<p>Let's go into the <kbd><span>class.showcase-widget.php</span></kbd> file now. We'll grab the <span class="packt_screen">Default</span> <span class="packt_screen">Usage</span> code from the documentation page (<a href="https://codex.wordpress.org/Widgets_API"><span class="URLPACKT">https://codex.wordpress.org/Widgets_API</span></a>) and we'll paste that in our editor with <kbd>php</kbd> tags. First of all we will have to change the name of the class from <kbd>My_Widget</kbd> to <kbd>Showcase_Widget</kbd>, and then let's take a look at the constructor and replace our code in there:</p>
<pre>public function __construct() {<br/>    parent::__construct(<br/>        'showcase_widget',<br/>        __('Showcase Widget', 'text_domain'),<br/>        array('description' =&gt; __('A widget to display showcase content', <br/>              'text_domain'),)<br/>        );<br/>    }</pre>
<p>The widget method will display the frontend of the widget, so we basically need three things which are as follows:</p>
<ul>
<li><span>We need the title of the widget</span></li>
<li>We need the heading</li>
<li>We need a field for the text</li>
</ul>
<p>We are going to paste the following code:</p>
<pre>public function widget( $args, $instance ) {<br/>    $title = apply_filters('widget_title', $instance['title']);<br/>    $heading = $instance['heading'];<br/>    $text = $instance['text'];<br/> }</pre>
<p>We'll stay in the same method and paste some other stuff in:</p>
<pre>public function widget( $args, $instance ) {<br/>    $title = apply_filters('widget_title', $instance['title']);<br/>    $heading = $instance['heading'];<br/>    $text = $instance['text'];<br/> <br/>    echo $args['before_title'];<br/>    if(!empty($title))<br/>      echo $args['before_title'] . $title . $args['after_title'];<br/> <br/>    //Display Content<br/>    echo $this-&gt;getContent($heading, $text);<br/>    echo $args['after_widget'];<br/>}</pre>
<p>Before we move on to these let's create <kbd>getContent</kbd>, which takes in the heading and text. Let's use the following code snippet:</p>
<pre>public function getContent($heading, $text){<br/>  $output = '&lt;h1&gt;'.$heading.'&lt;/h1&gt;&lt;p&gt;'<br/>            .$text.'&lt;/p&gt;&lt;button class="button"&gt;<br/>            Start Shopping&lt;/button&gt;';<br/> <br/>   return $output;<br/> }</pre>
<p>Now, we have a variable called <kbd>output</kbd> that we're sending it to a template with the <kbd>h1</kbd> and the text. Then we have a button and we are returning the output. So this <kbd>getContent</kbd> is actually going to display content's <kbd>echo $this-&gt;getContent($headng, $text);</kbd> where we're calling it.</p>
<p>Next, let's scroll down to <kbd>function form</kbd>. This represents the backend form where we can actually put the heading and the text and stuff like that. We will paste the following code in this function:</p>
<pre>public function form( $instance ) {<br/>    if(isset($instance['title'])){<br/>       $title = $instance['title'];<br/>    }<br/>    else{<br/>       $title = __('Showcase Widget', 'text_domain');<br/>    }<br/> }</pre>
<p>We're checking to see if there's a title, and if there is we'll set it to the variable to whatever is in the instance. If there's not, then we're just going to set it to <kbd>Showcase_Widget</kbd>. Then we also need to get the heading and the text, which we're pulling from the instances as well:</p>
<pre>public function form( $instance ) {<br/>    if(isset($instance['title'])){<br/>       $title = $instance['title'];<br/>    }<br/>    else{<br/>       $title = __('Showcase Widget', 'text_domain');<br/>    }<br/>    $heading = $instance['heading'];<br/>    $text = $instance['text'];<br/>}</pre>
<p>Now for the actual backend form it's a lot of HTML. We will end the <kbd>php</kbd> tag after <kbd>$text = $instance</kbd> and start the <kbd>php</kbd> tag on the next line. We will then put all the HTML between these opening and closing <kbd>phg</kbd> tags. Let's paste the following HTML code:</p>
<pre>&lt;p&gt;<br/>&lt;label for="&lt;?php echo $this-&gt;get_field_id('title'); ?&gt;"&gt;<br/>   &lt;?php _e('Title:'); ?&gt;<br/>&lt;/label&gt;<br/>&lt;input class="widefat" id="&lt;?php echo $this-&gt;<br/>  get_field_id('title'); ?&gt;" name="&lt;?php echo $this-&gt;<br/>  get_field_name('title'); ?&gt;" type="text" <br/>  value="&lt;?php echo esc_attr($title); ?&gt;"&gt;<br/> &lt;/p&gt;<br/> <br/>&lt;p&gt;<br/>&lt;label for="&lt;?php echo $this-&gt;get_field_id('heading'); ?&gt;"&gt;<br/>   &lt;?php _e('Heading:'); ?&gt;<br/>&lt;/label&gt;<br/>&lt;input class="widefat" id="&lt;?php echo $this-&gt;<br/>   get_field_id('heading'); ?&gt;" name="&lt;?php echo $this-&gt;<br/>   get_field_name('heading'); ?&gt;" type="text" <br/>   value="&lt;?php echo esc_attr($heading); ?&gt;"&gt;<br/>&lt;/p&gt;<br/> <br/>&lt;p&gt;<br/>&lt;label for="&lt;?php echo $this-&gt;get_field_id('text'); ?&gt;"&gt;<br/>   &lt;?php _e('Text:'); ?&gt;<br/>&lt;/label&gt;<br/>&lt;input class="widefat" id="&lt;?php echo $this-&gt;<br/>   get_field_id('text'); ?&gt;" name="&lt;?php echo $this-&gt;<br/>   get_field_name('text'); ?&gt;" type="text" <br/>   value="&lt;?php echo esc_attr($text); ?&gt;"&gt;<br/>&lt;/p&gt;</pre>
<p>Basically, we have a couple of paragraphs and they contain a label for each field and then the input. We can see for the label we can echo out <kbd>$this-&gt;get_field_id</kbd> and then what we want is the title. Then for the input we have an <kbd>id</kbd>, <kbd>get_field_id</kbd>, and then the name of the field which is title. Then for the name we have <kbd>get_field_name( 'title' )</kbd>, and for the value we'll use the title variable. We'll escape it with the escape attribute, <kbd>escape_attr</kbd>. We'll do the same thing for the heading and for the text. It's really quite simple even although it looks like a lot of code.</p>
<p>Next we want to go to the <kbd>update</kbd> method, when we add a heading and text in the backend and we click save, the <kbd>update</kbd> method is what saves it. Let us grab some code:</p>
<pre>public function update( $new_instance, $old_instance ) {<br/>    $instance = array();<br/>    $instance['title'] = (!empty($new_instance['title'])) ? <br/>        strip_tags($new_instance['title']) : '';<br/>    $instance['heading'] = (!empty($new_instance['heading'])) ? <br/>        strip_tags($new_instance['heading']) : '';<br/>    $instance['text'] = (!empty($new_instance[$text])) ? <br/>        strip_tags($new_instance['text']) : '';<br/> <br/>    return $instance;<br/> }</pre>
<p>We have an instance that equals an empty array. We'll say <kbd>instance['title']</kbd> equals whatever is in the new instance saved as the title. It's the same thing with the heading; we'll set it to the new instance heading, and the same with the text, and we'll return that instance. This will update whatever we put in for the fields in the backend widget form.</p>
<p>We'll make sure both files are saved and then we'll go in the backend and let's reload the webpage. Go to <span class="packt_screen">Plugins</span>, and we can see in the following screenshot the <span class="packt_screen">Showcase Widget</span> option; it has the description, version, and name, and we'll click on <span class="packt_screen">Activate</span>.</p>
<div class="packt_figure CDPAlignCenter CDPAlign"><img height="446" width="832" class="aligncenter size-full wp-image-1595 image-border" src="images/ada496d6-f13e-4a6f-a875-6cf0f055dbc9.png" /></div>
<p>Let's set up a widget position by going into <kbd>functions.php</kbd> in our <kbd>themes</kbd> folder. We'll set up our widget locations. So we'll scroll down to the bottom of the file and paste the following code:</p>
<pre>// Widget Locations<br/>function ms_init_widgets($id){<br/>    register_sidebar(array(<br/>    'name' =&gt; 'Sidebar',<br/>    'id' =&gt; 'sidebar',<br/>    'before_widget' =&gt; '&lt;div class="callout"&gt;',<br/>    'after_widget' =&gt; '&lt;/div&gt;',<br/>    'before_title' =&gt; '&lt;h3&gt;',<br/>    'after_title' =&gt; '&lt;/h3&gt;'<br/>));<br/> <br/>register_sidebar(array(<br/>    'name' =&gt; 'Showcase',<br/>    'id' =&gt; 'showcase',<br/>    'before_widget' =&gt; '',<br/>    'after_widget' =&gt; '',<br/>    'before_title' =&gt; '',<br/>    'after_title' =&gt;''<br/>));<br/>}<br/><br/>add_action('widgets_init', 'ms_init_widgets');</pre>
<p>So we have a function called <kbd>ms_init_widgets</kbd> and we have two places where we want widgets: one is on the sidebar and the other in the showcase for the widget we just created. In our sidebar we want <kbd>div class="callout"</kbd> to wrap around the whole widget, we want the title to be an h3. At the end, we'll call our action on <kbd>widgets_init</kbd> and input the name of our function, <kbd>ms_init_widgets</kbd>.</p>
<p>Let's save that, go back to the backend, and reload. Now under <span class="packt_screen">Appearance</span> we can now see <span class="packt_screen">Widgets</span>. If we click on that, we can see we have the <span class="packt_screen">Sidebar</span> and the <span class="packt_screen">Showcase</span> available, and if we scroll down the same page, we can see our <span class="packt_screen">Showcase</span> <span class="packt_screen">Widget</span>, which is the plugin we just created:</p>
<div class="packt_figure CDPAlignCenter CDPAlign"><img height="459" width="832" class="aligncenter size-full wp-image-1596 image-border" src="images/94e57734-c439-40c6-b393-2e8634345fe1.png" /></div>
<p>So let's go ahead and add the <span class="packt_screen">Showcase</span> <span class="packt_screen">Widget</span> to the showcase area. Here, we have our title, which we'll get rid of. For the heading we'll type <kbd>Discount Clothing</kbd>, and for the text we'll put some random text in there. Save that, go back. Well actually, the frontend is not going to change yet because we didn't implement it in the template, but we can see that the content has saved.</p>
<p>What we need to do now is go into our <kbd>index.php</kbd> file and scroll down to where we have this showcase area. Before we actually show it we want to check to make sure that it's enabled. So we'll modify and put the following code:</p>
<pre>&lt;?php if(is_active_sidebar('showcase')) : ?&gt; <br/>   &lt;div class="grid-x grid-padding-x showcase"&gt;<br/>      &lt;div class="large-12 cell"&gt;<br/>         &lt;div class="callout secondary"&gt;<br/>            &lt;?php dynamic_sidebar('showcase'); ?&gt;<br/>         &lt;/div&gt;<br/>      &lt;/div&gt;<br/>   &lt;/div&gt;<br/>&lt;?php endif; ?&gt;</pre>
<p>Save that, let's go check out the frontend, and we see <span class="packt_screen">Discount Clothing</span> on the web page, which is our title. Just to make sure that it's actually reading our widget, let's go and change the title to <kbd>Discount Clothings</kbd> and save it. Go to the frontend, reload, and we get <span class="packt_screen">Discount Clothings</span>. So you know that this is coming from our custom plugin.</p>
<p>We created a plugin wherein we'll not only able to use it on this theme, but we can use it anywhere. Alright, so in the next section we'll take care of the sidebar widgets. We want the Categories section to actually come from WordPress categories.</p>


            </article>

            
        </section>
    </div>
</body>
</html>